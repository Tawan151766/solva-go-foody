/**
 * Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
 * ‡πÉ‡∏ä‡πâ Mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */

import { stores, menuCategories, menus } from "@/data/stores";

/**
 * Service ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
 */
export class RestaurantDataService {
  constructor() {
    this.cache = new Map();
    this.cacheExpiry = 30 * 60 * 1000; // 30 ‡∏ô‡∏≤‡∏ó‡∏µ
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å mock data
   */
  async getRestaurants(
    lat = 13.8131,
    lng = 100.5372,
    radius = 5000,
    useCache = true
  ) {
    const cacheKey = `restaurants_${lat}_${lng}_${radius}`;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache
    if (useCache && this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < this.cacheExpiry) {
        console.log("üì¶ Using cached restaurant data");
        return cached.data;
      }
    }

    try {
      // ‡πÉ‡∏ä‡πâ mock data ‡∏à‡∏≤‡∏Å stores.js
      const restaurants = stores.map((store) => ({
        ...store,
        menus: this.getMenusForStore(store.id),
      }));

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
      this.cache.set(cacheKey, {
        data: restaurants,
        timestamp: Date.now(),
      });

      console.log(`‚úÖ Loaded ${restaurants.length} restaurants from mock data`);
      return restaurants;
    } catch (error) {
      console.error("‚ùå Error loading restaurants:", error);
      return [];
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
   */
  getMenusForStore(storeId) {
    return menus.filter((menu) => menu.storeId === storeId);
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏° ID
   */
  async getRestaurantById(id) {
    const restaurants = await this.getRestaurants();
    return restaurants.find((restaurant) => restaurant.id === parseInt(id));
  }

  /**
   * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
   */
  async searchRestaurants(query, lat, lng, radius = 5000) {
    const restaurants = await this.getRestaurants(lat, lng, radius);

    if (!query) return restaurants;

    const searchTerm = query.toLowerCase();
    return restaurants.filter(
      (restaurant) =>
        restaurant.name.toLowerCase().includes(searchTerm) ||
        restaurant.address.toLowerCase().includes(searchTerm) ||
        restaurant.category.toLowerCase().includes(searchTerm)
    );
  }

  /**
   * ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
   */
  async filterByCategory(category, lat, lng, radius = 5000) {
    const restaurants = await this.getRestaurants(lat, lng, radius);

    if (category === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") return restaurants;

    return restaurants.filter((restaurant) => restaurant.category === category);
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  async getCategories(lat, lng, radius = 5000) {
    const restaurants = await this.getRestaurants(lat, lng, radius);
    const categories = [...new Set(restaurants.map((r) => r.category))];
    return ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", ...categories.sort()];
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á cache
   */
  clearCache() {
    this.cache.clear();
    console.log("üóëÔ∏è Cache cleared");
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  async refreshData(lat, lng, radius = 5000) {
    this.clearCache();
    return await this.getRestaurants(lat, lng, radius, false);
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  getStats() {
    return {
      cacheSize: this.cache.size,
      cacheExpiry: this.cacheExpiry,
      totalStores: stores.length,
      totalMenus: menus.length,
    };
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ
const restaurantDataService = new RestaurantDataService();

export default restaurantDataService;
